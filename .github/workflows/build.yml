name: Build

on:
    push:
        branches:
            - master
    pull_request:
        branches:
            - master
    workflow_dispatch:
        inputs:
            run-on:
                description: 'Run on'
                required: true
                default: build-server
            aab:
                description: 'Build App Bundle'
                required: false
                default: 'false'

env:
    UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    PROJECT_PATH: .
    INSTALL_TIMEOUT: 15

jobs:
    checklicense:
        name: check if UNITY_LICENSE is set in github secrets
        runs-on: ${{ github.event.inputs.run-on || 'build-server' }}
        outputs:
            is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
        steps:
            - name: Check whether unity activation requests should be done
              id: checklicense_job
              run: |
                  echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
                  echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"
    activation:
        needs: [checklicense]
        if: needs.checklicense.outputs.is_unity_license_set == 'false'
        name: Request activation file ðŸ”‘ (https://license.unity3d.com/manual)
        runs-on: ${{ github.event.inputs.run-on || 'build-server' }}
        steps:
            # Request manual activation file
            - name: Request manual activation file
              id: getManualLicenseFile
                # https://github.com/game-ci/unity-request-activation-file/releases/
              uses: game-ci/unity-request-activation-file@v2.0-alpha-1
            # Upload artifact (Unity_v20XX.X.XXXX.alf)
            - name: Expose as artifact
              uses: actions/upload-artifact@v1
              with:
                  name: ${{ steps.getManualLicenseFile.outputs.filePath }}
                  path: ${{ steps.getManualLicenseFile.outputs.filePath }}

    build:
        needs: [checklicense]
        if: needs.checklicense.outputs.is_unity_license_set == 'true'
        name: Build for ${{ matrix.targetPlatform }}
        runs-on: ${{ github.event.inputs.run-on || 'build-server' }}
        strategy:
            fail-fast: false
            matrix:
                targetPlatform:
                    #- StandaloneOSX
                    #- StandaloneWindows
                    #- StandaloneWindows64
                    #- StandaloneLinux64
                    #- iOS
                    - Android
                    # See https://github.com/game-ci/docker/issues/53 webgl will be supported in editor image v0.9
                    # - WebGL
        steps:
            - run: sudo rm -rf /usr/share/dotnet \
                   sudo rm -rf /opt/ghc \
                   sudo rm -rf "/usr/local/share/boost" \
                   sudo rm -rf "$AGENT_TOOLSDIRECTORY" \ 
              if: ${{ github.event.inputs.run-on == 'ubuntu-latest' }}
                   
            - id: getExtension
              run: ${{ github.event.inputs.aab == 'true' }} && echo '::set-output name=EXT::aab' || echo '::set-output name=EXT::apk'
            - id: dirty
              name: Check if dirty
              run: echo "::set-output name=IS_DIRTY::${{ github.event.inputs.run-on == 'build-server' || github.event.inputs.run-on == 'build-server-local' || github.event.inputs.run-on == 'build-server-remote' || github.event.inputs.run-on == '' }}"
            - uses: actions/checkout@v2
              with:  
                  lfs: true
                  clean: ${{ steps.dirty.outputs.IS_DIRTY != 'true' }}
            - uses: actions/cache@v2.1.3
              if: ${{ steps.dirty.outputs.IS_DIRTY != 'true' }}
              with:
                  path: Library
                  key: build-Library-${{ matrix.targetPlatform }}
                  restore-keys: |
                      build-Library-
            # https://github.com/game-ci/unity-builder/releases/
            - uses: game-ci/unity-builder@v2.0-alpha-8
              id: buildStep
              with:
                  projectPath: ${{ env.PROJECT_PATH }}
                  targetPlatform: ${{ matrix.targetPlatform }}
                  allowDirtyBuild: ${{ steps.dirty.outputs.IS_DIRTY == 'true' }}
                  
                  androidKeystoreName: user.keystore
                  androidAppBundle: ${{ github.event.inputs.aab || 'false' }}
                  androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
                  androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
                  androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
                  androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
            - uses: xresloader/upload-to-github-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ steps.buildStep.outputs.buildVersion }}
                file: "build/${{ matrix.targetPlatform }}/${{ matrix.targetPlatform }}.*"        
                draft: false
                
            - run: timeout "${{ env.INSTALL_TIMEOUT }}" adb uninstall "build/${{ matrix.targetPlatform }}/${{ matrix.targetPlatform }}.${{ steps.getExtension.outputs.EXT }}" || true
              if: ${{ steps.getExtension.outputs.EXT == 'apk' }}
                
            - id: adbInstall
              if: ${{ steps.getExtension.outputs.EXT == 'apk' }}
              run: timeout "${{ env.INSTALL_TIMEOUT }}" adb install -r "build/${{ matrix.targetPlatform }}/${{ matrix.targetPlatform }}.${{ steps.getExtension.outputs.EXT }}"  && echo '::set-output name=MESSAGE::Installed the build.' || echo '::set-output name=MESSAGE::Failed to install the build.'

            - name: Discord notification
              env:
                DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_BUILD }}
              uses: Ilshidur/action-discord@master
              with:
                args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been built (.${{ steps.getExtension.outputs.EXT }}, version ${{ steps.buildStep.outputs.buildVersion }}). ${{ steps.adbInstall.outputs.MESSAGE }} Check it out at https://github.com/{{ EVENT_PAYLOAD.repository.full_name }}/releases/tag/${{ steps.buildStep.outputs.buildVersion }}.'
